if(!params.DEPLOY_ENV) {
    error('Aborting the deployment - DEPLOY_ENV job parameter must be set')
}

pipeline {
    agent {
        label 'secure'
    }
    parameters {
        string(name: 'VERSION', defaultValue: 'v0', description: 'Which version to deploy')
    }
    stages {
        stage('Deploy') {
            script {
                currentBuild.displayName = currentBuild.displayName + ' ' + params.VERSION
            }
            steps {
                withCredentials([string(credentialsId: "deployment-token-${params.DEPLOY_ENV}", variable: 'TOKEN')]) {
                    sh './deploy.sh ' + params.DEPLOY_ENV + ' $TOKEN $VERSION'
                }
            }
        }
        stage('Announce Deployment') {
            parallel {
                stage ('Pre-Production Deployments') {
                    when {
                        not {
                            equals expected: 'production', actual: params.DEPLOY_ENV
                        }
                    }
                    steps {
                        echo "Deployment to ${params.DEPLOY_ENV} was successful"
                    }
                }
                stage ('Production Deployments') {
                    when {
                        equals expected: 'production', actual: params.DEPLOY_ENV
                    }
                    steps {
                        echo 'Rejoice the deployment to PRODUCTION was successful'
                        echo 'We will now drink some champagne'
                    }
                }
            }
        }
    }
    post {
        cleanup {
            deleteDir()
        }
    }
}
